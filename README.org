#+TITLE: Doom Emacs Configuration
#+AUTHOR: Martin Brignall
#+OPTIONS: toc:nil

* Introduction
This is an Org-mode file to store and manage your Doom Emacs configuration files, including `config.el`, `init.el`, and `packages.el`.

** config.el
The `config.el` file is where you define your personal settings and configurations for Emacs and the various packages you use.

#+BEGIN_SRC emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; User information
(setq user-full-name "mbrignall"
      user-mail-address "market.payment@tobaccofactory.com")

;; Font and theme configuration
(setq doom-theme 'doom-shades-of-purple)

;; Line number configuration
(setq display-line-numbers-type t)

;; Enable editorconfig-mode
(editorconfig-mode 1)

;; Set transparency
(set-frame-parameter (selected-frame) 'alpha '(85 85))
(add-to-list 'default-frame-alist '(alpha 85 85))

;; Mouse configuration
(setq mouse-autoselect-window t
      focus-follows-mouse t)

;; Org directory configuration
(setq org-directory "~/org/")

;; Org-mode config

(add-hook 'org-mode-hook (lambda () (org-indent-mode t)))
(use-package! org-bullets
  :hook (org-mode . org-bullets-mode))
(add-hook 'org-mode-hook #'visual-line-mode)

(use-package! org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :init
  (setq org-bullets-bullet-list '("â—‰" "â—‹" "âœ¸" "âœ¿" "âœ¤" "âœœ")))

;; Set up fonts
(setq doom-font (font-spec :family "FuraMono Nerd Font" :size 12)
      doom-variable-pitch-font (font-spec :family "Hack" :size 14))

;; Enable variable-pitch-mode in org-mode
(add-hook 'org-mode-hook 'variable-pitch-mode)
(add-hook 'org-mode-hook 'org-indent-mode)

;; Org Ox reveal
(require 'ox-reveal)
(setq Org-Reveal-root "file:///home/martinbrignall/reveal.js-master/js/reveal.js")
(setq Org-Reveal-title-slide nil)

;; Plantuml config

(setq plantuml-default-exec-mode 'executable)
(after! org
  (use-package! plantuml-mode
    :config
    (setq plantuml-default-exec-mode 'jar)
    (setq plantuml-jar-path "/home/martinbrignall/.emacs.d/.local/etc/plantuml.jar"))
  (setq org-plantuml-jar-path plantuml-jar-path)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((plantuml . t))))

;; Docker config basics
(use-package docker
  :bind ("C-c d" . docker))

;; Python config
(after! lsp-mode
  (require 'lsp-pyright)
  (add-hook 'python-mode-hook (lambda ()
                                (require 'lsp-pyright)
                                (lsp-deferred))))

;; Assume .astro files to be JSX
(setq auto-mode-alist
      (append '((".*\\.astro\\'" . js-jsx-mode))
              auto-mode-alist))

;; Weather stuff
(require 'weather-metno)

(require 'request)

(defun get-current-weather (location api-key)
  "Retrieves the current weather data for the given location using the OpenWeatherMap API."
  (request
   (format "https://archive-api.open-meteo.com/v1/archive?latitude=51.46&longitude=-2.60&start_date=2023-01-01&end_date=2023-03-26&hourly=temperature_2m,precipitation,rain,snowfall,windspeed_10m,windspeed_100m,winddirection_10m,winddirection_100m,windgusts_10m&daily=rain_sum,windspeed_10m_max,windgusts_10m_max,winddirection_10m_dominant&timezone=auto&windspeed_unit=mph" location api-key)
   :type "GET"
   :parser 'json-read
   :success (cl-function (lambda (&key data &allow-other-keys)
                           data))))

#+END_SRC

** init.el
The `init.el` file is the main entry point for your Doom Emacs configuration. It's responsible for setting up Doom's core features and loading the modules you've enabled in this file.

#+BEGIN_SRC emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company          ; the ultimate code completion backend
       ;;helm               ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +icons)    ; the search engine of the future




       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       ;;workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +flyspell) ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       direnv
       docker
       editorconfig      ; let someone else argue about tabs vs spaces
       ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;go         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       (json +lsp)              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       (javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       (markdown +lsp)         ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org
        +dragndrop
        +present
        +pandoc
        +hugo
        +roam2)               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       (plantuml +lsp)          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp)            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       (sh +lsp)                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web +lsp)               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+END_SRC

** packages.el
The `packages.el` file is where you define additional packages to be installed and managed by Doom. You can also configure package-specific settings in this file.

#+BEGIN_SRC emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; private/my-packages/packages.el

(package! all-the-icons)
(package! all-the-icons-dired)
(package! all-the-icons-ivy)
(package! all-the-icons-ivy-rich)
(package! auctex)
(package! company-web)
(package! counsel)
(package! docker)
(package! docker-compose-mode)
(package! docker-tramp)
(package! esh-autosuggest)
(package! esh-help)
(package! eshell-did-you-mean)
(package! eshell-z)
(package! flymake-golangci)
(package! flymake-python-pyflakes)
(package! go-mode)
(package! go-projectile)
(package! helm-projectile)
(package! ivy-avy)
(package! ivy-rich)
(package! ivy-xref)
(package! lsp-mode)
(package! lsp-pyright)
(package! org-bullets)
(package! org-projectile)
(package! org-roam)
(package! org-re-reveal)
(package! ox-pandoc)
(package! ox-reveal)
(package! pandoc)
(package! pandoc-mode)
(package! plantuml-mode)
(package! flycheck-plantuml)
(package! projectile-git-autofetch)
(package! python-django)
(package! web-mode)
(package! webkit-color-picker)
#+END_SRC

* Formatting and Styles
Add your custom formatting and styles here.
